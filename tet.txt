#!/usr/bin/env python3
import subprocess, sys

DEBUG = True  # ustaw na False w Zabbixie

seed_host = "99.88.22.21"   # jeden z węzłów klastra
seed_port = 6379
redis_password = "rewq1234"  # <<< podaj swoje hasło
use_tls = True               # <<< wymuszamy TLS

def run_cmd(cmd):
    try:
        out = subprocess.check_output(cmd, text=True, stderr=subprocess.STDOUT)
        return out
    except subprocess.CalledProcessError as e:
        if DEBUG:
            print("CMDERR:", " ".join(cmd), "=>", e.output, file=sys.stderr)
        raise

def discover_masters():
    cmd = ["redis-cli", "-c", "-h", seed_host, "-p", str(seed_port)]
    if use_tls:
        cmd.append("--tls")
    if redis_password:
        cmd += ["-a", redis_password]
    cmd.append("cluster nodes")
    out = run_cmd(cmd)
    masters = []
    for line in out.splitlines():
        if DEBUG:
            print("NODE:", line, file=sys.stderr)
        parts = line.split()
        if len(parts) < 3:
            continue
        addr = parts[1]
        flags = " ".join(parts[2:])
        if "master" in flags and "fail" not in flags:
            host = addr.split(":")[0]
            port_str = addr.split(":")[1].split("@")[0]
            try:
                port = int(port_str)
            except:
                continue
            masters.append((host, port))
    return masters

def get_stats_via_cli(host, port):
    cmd = ["redis-cli", "-h", host, "-p", str(port)]
    if use_tls:
        cmd.append("--tls")
    if redis_password:
        cmd += ["-a", redis_password]
    cmd += ["info", "stats"]
    out = run_cmd(cmd)
    hits = misses = 0
    for line in out.splitlines():
        if line.startswith("keyspace_hits:"):
            hits = int(line.split(":", 1)[1].strip())
        elif line.startswith("keyspace_misses:"):
            misses = int(line.split(":", 1)[1].strip())
    return hits, misses

def main():
    masters = discover_masters()
    if DEBUG:
        print("Discovered masters:", masters, file=sys.stderr)

    total_hits = 0
    total_misses = 0

    if not masters:
        print("0")
        return

    for host, port in masters:
        if DEBUG:
            print(f"Checking {host}:{port}", file=sys.stderr)
        try:
            h, m = get_stats_via_cli(host, port)
            if DEBUG:
                print(f"{host}:{port} hits={h} misses={m}", file=sys.stderr)
            total_hits += h
            total_misses += m
        except Exception as e:
            if DEBUG:
                print(f"Failed {host}:{port}: {e}", file=sys.stderr)

    total = total_hits + total_misses
    if total == 0:
        print("0")
    else:
        print(f"{(total_hits/total)*100:.2f}")

if __name__ == "__main__":
    main()
