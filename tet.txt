import csv
import re
from datetime import datetime
import chardet

def detect_encoding(file_path):
    """Wykrywa stronƒô kodowƒÖ pliku."""
    with open(file_path, "rb") as f:
        raw = f.read(10000)
        result = chardet.detect(raw)
        return result["encoding"]

def validate_pli_line(fields):
    """Waliduje jednƒÖ liniƒô PLI."""
    errors = []

    if len(fields) != 16:
        errors.append(f"Niew≈Ça≈õciwa liczba p√≥l: {len(fields)} (oczekiwano 16)")
        return errors

    # 1. Kod zlecenia
    if not re.fullmatch(r'110|210|71', fields[0]):
        errors.append(f"Niepoprawny kod zlecenia: {fields[0]}")

    # 2. Data wykonania
    try:
        datetime.strptime(fields[1], "%Y%m%d")
    except ValueError:
        errors.append(f"Niepoprawna data wykonania: {fields[1]}")

    # 3. Kwota
    if not re.fullmatch(r'\d{1,15}', fields[2]):
        errors.append(f"Niepoprawna kwota: {fields[2]}")

    # 4. Numer rozliczeniowy banku zleceniodawcy
    if not re.fullmatch(r'\d{8}', fields[3]):
        errors.append(f"Niepoprawny numer rozliczeniowy banku zleceniodawcy: {fields[3]}")

    # 5. Pole zerowe
    if fields[4] != '0':
        errors.append(f"Pole 5 powinno byƒá zerem: {fields[4]}")

    # 6. Numer rachunku zleceniodawcy NRB
    if not re.fullmatch(r'\d{26}', fields[5]):
        errors.append(f"Niepoprawny numer rachunku zleceniodawcy: {fields[5]}")

    # 7. Numer rachunku kontrahenta NRB
    if not re.fullmatch(r'\d{26}', fields[6]):
        errors.append(f"Niepoprawny numer rachunku kontrahenta: {fields[6]}")

    # 8, 9, 12 ‚Äì nazwy/adresy/tytu≈Çy (maks. 4 linie po 35 znak√≥w)
    for idx in [7, 8, 11]:
        content = fields[idx]
        lines = content.split('|')
        if len(lines) > 4:
            errors.append(f"Pole {idx+1} ma wiƒôcej ni≈º 4 linie")
        for line_content in lines:
            if len(line_content) > 35:
                errors.append(f"Linia w polu {idx+1} za d≈Çuga (>35 znak√≥w): {line_content}")

    # 10. Pole zerowe
    if fields[9] != '0':
        errors.append(f"Pole 10 powinno byƒá zerem: {fields[9]}")

    # 11. Numer rozliczeniowy banku kontrahenta
    if not re.fullmatch(r'\d{8}', fields[10]):
        errors.append(f"Niepoprawny numer rozliczeniowy banku kontrahenta: {fields[10]}")

    # 15. Klasyfikacja polecenia
    valid_klasyfikacja = {
        "110": "51",
        "210": "01",
        "71": "71"
    }
    if fields[14] != valid_klasyfikacja.get(fields[0], ""):
        errors.append(f"Niepoprawna klasyfikacja polecenia dla kodu {fields[0]}: {fields[14]}")

    return errors

def main(file_path):
    encoding = detect_encoding(file_path)
    print(f"üìë Strona kodowa pliku: {encoding}\n")

    with open(file_path, "r", encoding=encoding, errors="replace", newline="") as f:
        reader = csv.reader(f, delimiter=",", quotechar='"')
        for i, fields in enumerate(reader, 1):
            errs = validate_pli_line(fields)
            if errs:
                print(f"\n‚ùå B≈ÇƒÖd w linii {i}: {fields}")
                for e in errs:
                    print("   -", e)
            else:
                print(f"‚úÖ Linia {i} poprawna")

if __name__ == "__main__":
    main("przyklad.pli")
