import csv
import re
from datetime import datetime
import chardet

def detect_encoding(file_path):
    with open(file_path, "rb") as f:
        raw = f.read(10000)
        result = chardet.detect(raw)
        return result["encoding"]

def find_first_invalid_char(value, pattern):
    """Zwraca indeks pierwszego znaku niepasujƒÖcego do regexa."""
    m = re.fullmatch(pattern, value)
    if m:
        return None
    for i in range(len(value)):
        if not re.fullmatch(pattern, value[:i+1]):
            return i
    return 0 if value else None

def validate_pli_record(fields, recno):
    errors = []

    if len(fields) != 16:
        errors.append(f"[rekord {recno}] ‚ùå niew≈Ça≈õciwa liczba p√≥l: {len(fields)} (oczekiwano 16)")
        return errors

    # 1. Kod zlecenia
    if fields[0] not in {"110", "210", "71"}:
        errors.append(f"[rekord {recno}, pole 1] ‚ùå Kod zlecenia '{fields[0]}' niepoprawny")

    # 2. Data wykonania
    try:
        datetime.strptime(fields[1], "%Y%m%d")
    except ValueError:
        errors.append(f"[rekord {recno}, pole 2] ‚ùå B≈Çƒôdna data '{fields[1]}'")

    # 3. Kwota
    pos = find_first_invalid_char(fields[2], r"\d{1,15}")
    if pos is not None:
        errors.append(f"[rekord {recno}, pole 3] ‚ùå Kwota '{fields[2]}', b≈ÇƒÖd przy znaku {pos+1} ('{fields[2][pos]}')")

    # 4. BSC zleceniodawcy
    pos = find_first_invalid_char(fields[3], r"\d{8}")
    if pos is not None:
        errors.append(f"[rekord {recno}, pole 4] ‚ùå BSC '{fields[3]}', b≈ÇƒÖd przy znaku {pos+1}")

    # 5. Pole zerowe
    if fields[4] != "0":
        errors.append(f"[rekord {recno}, pole 5] ‚ùå powinno byƒá '0', a jest '{fields[4]}'")

    # 6. NRB zleceniodawcy
    pos = find_first_invalid_char(fields[5], r"\d{26}")
    if pos is not None:
        errors.append(f"[rekord {recno}, pole 6] ‚ùå NRB '{fields[5]}', b≈ÇƒÖd przy znaku {pos+1}")

    # 7. NRB kontrahenta
    pos = find_first_invalid_char(fields[6], r"\d{26}")
    if pos is not None:
        errors.append(f"[rekord {recno}, pole 7] ‚ùå NRB '{fields[6]}', b≈ÇƒÖd przy znaku {pos+1}")

    # 8, 9, 12 ‚Äì nazwy/adresy/tytu≈Ç
    for idx in [7, 8, 11]:
        content = fields[idx]
        lines = content.split("|")
        if len(lines) > 4:
            errors.append(f"[rekord {recno}, pole {idx+1}] ‚ùå za du≈ºo linii ({len(lines)}), max 4")
        for lno, line_content in enumerate(lines, 1):
            if len(line_content) > 35:
                errors.append(
                    f"[rekord {recno}, pole {idx+1}, linia {lno}] ‚ùå za d≈Çuga (>35): '{line_content}'"
                )

    # 10. Pole zerowe
    if fields[9] != "0":
        errors.append(f"[rekord {recno}, pole 10] ‚ùå powinno byƒá '0', a jest '{fields[9]}'")

    # 11. BSC kontrahenta
    pos = find_first_invalid_char(fields[10], r"\d{8}")
    if pos is not None:
        errors.append(f"[rekord {recno}, pole 11] ‚ùå BSC '{fields[10]}', b≈ÇƒÖd przy znaku {pos+1}")

    # 15. Klasyfikacja polecenia
    valid_klasyfikacja = {"110": "51", "210": "01", "71": "71"}
    expected = valid_klasyfikacja.get(fields[0], "")
    if fields[14] != expected:
        errors.append(f"[rekord {recno}, pole 15] ‚ùå '{fields[14]}' zamiast '{expected}' dla kodu {fields[0]}")

    return errors

def main(file_path):
    encoding = detect_encoding(file_path)
    print(f"üìë Strona kodowa pliku: {encoding}\n")

    with open(file_path, "r", encoding=encoding, errors="replace", newline="") as f:
        reader = csv.reader(f, delimiter=",", quotechar='"')
        all_fields = []
        for row in reader:
            all_fields.extend(row)

    if len(all_fields) % 16 != 0:
        print(f"‚ùå UWAGA: ca≈Çkowita liczba p√≥l = {len(all_fields)}, nie dzieli siƒô przez 16!")
        print("Ostatnie pola:", all_fields[-20:])

    for recno, start in enumerate(range(0, len(all_fields), 16), 1):
        record = all_fields[start:start+16]
        errs = validate_pli_record(record, recno)
        if errs:
            print("\n‚ùå B≈Çƒôdy w rekordzie", recno)
            for e in errs:
                print("  -", e)
            for i, field in enumerate(record, 1):
                print(f"     pole {i}: {field}")
        else:
            print(f"‚úÖ Rekord {recno} poprawny")

if __name__ == "__main__":
    main("przyklad.pli")
